namespace GitRead.Net
{
    using GitRead.Net.Data;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.IO;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    public class RepositoryAnalyzer
    {
        private readonly RepositoryReader repositoryReader;

        public RepositoryAnalyzer(string repoPath)
        {
            this.repositoryReader = new RepositoryReader(repoPath);
        }

        public CommitDelta GetChanges(string commitHash)
        {
            Commit commit = this.repositoryReader.ReadCommit(commitHash);
            List<FileChange> added = new List<FileChange>();
            List<FileChange> deleted = new List<FileChange>();
            List<FileChange> modified = new List<FileChange>();
            if ((commit.Parents.Count != 0) && (commit.Parents.Count <= 2))
            {
                string str = commit.Parents[0];
                Dictionary<string, PathHashMode> dictionary = Enumerable.ToDictionary<PathHashMode, string>(this.GetPathAndHashForFiles(str), x => x.Path);
                Dictionary<string, PathHashMode> dictionary2 = null;
                if (commit.Parents.Count > 1)
                {
                    string str2 = commit.Parents[1];
                    dictionary2 = Enumerable.ToDictionary<PathHashMode, string>(this.GetPathAndHashForFiles(str2), x => x.Path);
                }
                Dictionary<string, PathHashMode> dictionary3 = Enumerable.ToDictionary<PathHashMode, string>(this.GetPathAndHashForFiles(commitHash), x => x.Path);
                HashSet<string> set = new HashSet<string>(Enumerable.Concat<string>((IEnumerable<string>) dictionary3.get_Keys(), (IEnumerable<string>) dictionary.get_Keys()));
                if (dictionary2 != null)
                {
                    set.UnionWith((IEnumerable<string>) dictionary2.get_Keys());
                }
                foreach (string str3 in set)
                {
                    PathHashMode mode;
                    PathHashMode mode2;
                    PathHashMode mode3;
                    bool flag = dictionary3.TryGetValue(str3, out mode);
                    bool flag2 = dictionary.TryGetValue(str3, out mode2);
                    if (dictionary2 == null)
                    {
                        if (!(flag2 & flag) || (mode2.Hash == mode.Hash))
                        {
                            if (flag2 && !flag)
                            {
                                deleted.Add(new FileChange(mode2.Path, 0, this.GetLineCount(mode2.Hash, mode2.Mode)));
                                continue;
                            }
                            if (!(!flag2 & flag))
                            {
                                continue;
                            }
                            added.Add(new FileChange(mode.Path, this.GetLineCount(mode.Hash, mode.Mode), 0));
                            continue;
                        }
                        int num3 = 0;
                        int num4 = 0;
                        if ((mode2.Mode != TreeEntryMode.RegularExecutableFile) && (mode.Mode != TreeEntryMode.RegularExecutableFile))
                        {
                            (int, int) linesChanged = DiffGenerator.GetLinesChanged(this.repositoryReader.ReadBlob(mode2.Hash), this.repositoryReader.ReadBlob(mode.Hash));
                            num3 = linesChanged.Item1;
                            num4 = linesChanged.Item2;
                        }
                        modified.Add(new FileChange(mode.Path, num3, num4));
                        continue;
                    }
                    bool flag3 = dictionary2.TryGetValue(str3, out mode3);
                    if (!(flag2 & flag) || ((mode2.Hash == mode.Hash) || (!(flag3 & flag) || (mode3.Hash == mode.Hash))))
                    {
                        if ((flag2 | flag3) && !flag)
                        {
                            deleted.Add(new FileChange(mode2.Path, 0, this.GetLineCount(mode2.Hash, mode2.Mode)));
                            continue;
                        }
                        if (!((!flag2 && !flag3) & flag))
                        {
                            continue;
                        }
                        added.Add(new FileChange(mode.Path, this.GetLineCount(mode.Hash, mode.Mode), 0));
                        continue;
                    }
                    int numberOfLinesAdded = 0;
                    int numberOfLinesDeleted = 0;
                    if ((mode2.Mode != TreeEntryMode.RegularExecutableFile) && ((mode3.Mode != TreeEntryMode.RegularExecutableFile) && (mode.Mode != TreeEntryMode.RegularExecutableFile)))
                    {
                        (int, int) tuple1 = DiffGenerator.GetLinesChanged(this.repositoryReader.ReadBlob(mode2.Hash), this.repositoryReader.ReadBlob(mode3.Hash), this.repositoryReader.ReadBlob(mode.Hash));
                        numberOfLinesAdded = tuple1.Item1;
                        numberOfLinesDeleted = tuple1.Item2;
                    }
                    modified.Add(new FileChange(mode.Path, numberOfLinesAdded, numberOfLinesDeleted));
                }
            }
            return new CommitDelta(added, deleted, modified);
        }

        public IEnumerable<Commit> GetCommits()
        {
            string branchName = this.repositoryReader.ReadHead();
            string commitHash = this.repositoryReader.ReadBranch(branchName);
            return this.GetCommits(commitHash);
        }

        [IteratorStateMachine((Type) typeof(<GetCommits>d__13))]
        public IEnumerable<Commit> GetCommits(string commitHash)
        {
            <GetCommits>d__13 d__1 = new <GetCommits>d__13(-2);
            d__1.<>4__this = this;
            d__1.<>3__commitHash = commitHash;
            return d__1;
        }

        public IReadOnlyDictionary<string, IReadOnlyList<Commit>> GetCommitsForAllFilePaths()
        {
            string branchName = this.repositoryReader.ReadHead();
            string commitHash = this.repositoryReader.ReadBranch(branchName);
            return this.GetCommitsForAllFilePaths(commitHash);
        }

        public IReadOnlyDictionary<string, IReadOnlyList<Commit>> GetCommitsForAllFilePaths(string commitHash)
        {
            Dictionary<string, List<string>> dictionary = Enumerable.ToDictionary<string, string, List<string>>(this.GetFilePaths(commitHash), x => x, x => new List<string>());
            Dictionary<string, Commit> earliestCommit = new Dictionary<string, Commit>();
            Dictionary<string, IReadOnlyList<TreeEntry>> treeCache = new Dictionary<string, IReadOnlyList<TreeEntry>>();
            foreach (Commit commit in this.GetCommits())
            {
                foreach (string str in dictionary.get_Keys())
                {
                    string str2;
                    if (this.TryGetContentHashForPath(commit.Tree, str, out str2, treeCache))
                    {
                        if (!earliestCommit.ContainsKey(str2))
                        {
                            dictionary[str].Add(str2);
                            earliestCommit.set_Item(str2, commit);
                            continue;
                        }
                        if (earliestCommit[str2].Timestamp > commit.Timestamp)
                        {
                            earliestCommit.set_Item(str2, commit);
                        }
                    }
                }
            }
            Dictionary<string, IReadOnlyList<Commit>> dictionary3 = new Dictionary<string, IReadOnlyList<Commit>>();
            foreach (string str3 in dictionary.get_Keys())
            {
                Func<string, Commit> <>9__2;
                Func<string, Commit> func2 = <>9__2;
                if (<>9__2 == null)
                {
                    Func<string, Commit> local3 = <>9__2;
                    func2 = <>9__2 = x => earliestCommit[x];
                }
                dictionary3.set_Item(str3, (IReadOnlyList<Commit>) Enumerable.ToList<Commit>(Enumerable.Select<string, Commit>(dictionary[str3], func2)));
            }
            return (IReadOnlyDictionary<string, IReadOnlyList<Commit>>) dictionary3;
        }

        public IReadOnlyList<Commit> GetCommitsForOneFilePath(string filePath)
        {
            string branchName = this.repositoryReader.ReadHead();
            string commitHash = this.repositoryReader.ReadBranch(branchName);
            return this.GetCommitsForOneFilePath(filePath, commitHash);
        }

        public IReadOnlyList<Commit> GetCommitsForOneFilePath(string filePath, string commitHash)
        {
            List<string> list = new List<string>();
            Dictionary<string, Commit> earliestCommit = new Dictionary<string, Commit>();
            foreach (Commit commit in this.GetCommits(commitHash))
            {
                string str;
                if (this.TryGetContentHashForPath(commit.Tree, filePath, out str, null))
                {
                    if (!earliestCommit.ContainsKey(str))
                    {
                        list.Add(str);
                        earliestCommit.set_Item(str, commit);
                        continue;
                    }
                    if (earliestCommit[str].Timestamp > commit.Timestamp)
                    {
                        earliestCommit.set_Item(str, commit);
                    }
                }
            }
            return (IReadOnlyList<Commit>) Enumerable.ToList<Commit>((IEnumerable<Commit>) (from x in (IEnumerable<string>) list select earliestCommit[x]));
        }

        private IReadOnlyList<TreeEntry> GetEntries(Dictionary<string, IReadOnlyList<TreeEntry>> treeCache, string treeHash)
        {
            IReadOnlyList<TreeEntry> list;
            if (treeCache == null)
            {
                return this.repositoryReader.ReadTree(treeHash);
            }
            if (!treeCache.TryGetValue(treeHash, out list))
            {
                list = this.repositoryReader.ReadTree(treeHash);
                treeCache.set_Item(treeHash, list);
            }
            return list;
        }

        public IEnumerable<FileLineCount> GetFileLineCounts()
        {
            string branchName = this.repositoryReader.ReadHead();
            string commitHash = this.repositoryReader.ReadBranch(branchName);
            return this.GetFileLineCounts(commitHash);
        }

        public IEnumerable<FileLineCount> GetFileLineCounts(string commitHash) => 
            (from x in this.GetPathAndHashForFiles(commitHash) select new FileLineCount(x.Path, this.GetLineCount(x.Hash, x.Mode)));

        public IEnumerable<string> GetFilePaths()
        {
            string branchName = this.repositoryReader.ReadHead();
            string commitHash = this.repositoryReader.ReadBranch(branchName);
            return this.GetFilePaths(commitHash);
        }

        public IEnumerable<string> GetFilePaths(string commitHash) => 
            (from x in this.GetPathAndHashForFiles(commitHash) select x.Path);

        private int GetLineCount(string hash, TreeEntryMode mode)
        {
            if (mode == TreeEntryMode.RegularExecutableFile)
            {
                return 0;
            }
            string str = this.repositoryReader.ReadBlob(hash);
            return ((str.Length == 0) ? 0 : (Enumerable.Count<char>((IEnumerable<char>) str, c => c == '\n') + 1));
        }

        [IteratorStateMachine((Type) typeof(<GetPathAndHashForFiles>d__17))]
        internal IEnumerable<PathHashMode> GetPathAndHashForFiles(string commitHash)
        {
            <GetPathAndHashForFiles>d__17 d__1 = new <GetPathAndHashForFiles>d__17(-2);
            d__1.<>4__this = this;
            d__1.<>3__commitHash = commitHash;
            return d__1;
        }

        public int GetTotalNumberOfCommits() => 
            Enumerable.Count<Commit>(this.GetCommits());

        private bool TryGetContentHashForPath(string rootTreeHash, string filePath, out string contentHash, Dictionary<string, IReadOnlyList<TreeEntry>> treeCache = null)
        {
            bool flag;
            string treeHash = rootTreeHash;
            char[] separator = new char[] { (char) Path.DirectorySeparatorChar };
            string[] segments = filePath.Split(separator);
            using (IEnumerator<string> enumerator = Enumerable.Take<string>(segments, segments.Length - 1).GetEnumerator())
            {
                while (true)
                {
                    if (enumerator.MoveNext())
                    {
                        string hash;
                        string segment = enumerator.Current;
                        TreeEntry local1 = Enumerable.FirstOrDefault<TreeEntry>((IEnumerable<TreeEntry>) (from x in (IEnumerable<TreeEntry>) this.GetEntries(treeCache, treeHash)
                            where (x.Mode == TreeEntryMode.Directory) && (x.Name == segment)
                            select x));
                        if (local1 != null)
                        {
                            hash = local1.Hash;
                        }
                        else
                        {
                            TreeEntry local2 = local1;
                            hash = null;
                        }
                        treeHash = hash;
                        if (treeHash != null)
                        {
                            continue;
                        }
                        contentHash = null;
                        flag = false;
                    }
                    else
                    {
                        string hash;
                        TreeEntry local3 = Enumerable.FirstOrDefault<TreeEntry>((IEnumerable<TreeEntry>) (from x in (IEnumerable<TreeEntry>) this.GetEntries(treeCache, treeHash)
                            where x.Name == segments[segments.Length - 1]
                            select x));
                        if (local3 != null)
                        {
                            hash = local3.Hash;
                        }
                        else
                        {
                            TreeEntry local4 = local3;
                            hash = null;
                        }
                        contentHash = hash;
                        return (contentHash != null);
                    }
                    break;
                }
            }
            return flag;
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly RepositoryAnalyzer.<>c <>9 = new RepositoryAnalyzer.<>c();
            public static Func<RepositoryAnalyzer.PathHashMode, string> <>9__4_0;
            public static Func<string, string> <>9__10_0;
            public static Func<string, List<string>> <>9__10_1;
            public static Func<RepositoryAnalyzer.PathHashMode, string> <>9__11_0;
            public static Func<RepositoryAnalyzer.PathHashMode, string> <>9__11_2;
            public static Func<RepositoryAnalyzer.PathHashMode, string> <>9__11_1;
            public static Func<KeyValuePair<string, int>, bool> <>9__13_0;
            public static Func<Commit, DateTime> <>9__13_2;
            public static Func<char, bool> <>9__16_0;

            internal string <GetChanges>b__11_0(RepositoryAnalyzer.PathHashMode x) => 
                x.Path;

            internal string <GetChanges>b__11_1(RepositoryAnalyzer.PathHashMode x) => 
                x.Path;

            internal string <GetChanges>b__11_2(RepositoryAnalyzer.PathHashMode x) => 
                x.Path;

            internal bool <GetCommits>b__13_0(KeyValuePair<string, int> x) => 
                (x.Value == 0);

            internal DateTime <GetCommits>b__13_2(Commit x) => 
                x.Timestamp;

            internal string <GetCommitsForAllFilePaths>b__10_0(string x) => 
                x;

            internal List<string> <GetCommitsForAllFilePaths>b__10_1(string x) => 
                new List<string>();

            internal string <GetFilePaths>b__4_0(RepositoryAnalyzer.PathHashMode x) => 
                x.Path;

            internal bool <GetLineCount>b__16_0(char c) => 
                (c == '\n');
        }

        [CompilerGenerated]
        private sealed class <GetCommits>d__13 : IEnumerable<Commit>, IEnumerator<Commit>, IEnumerable, IEnumerator, IDisposable
        {
            private int <>1__state;
            private Commit <>2__current;
            private int <>l__initialThreadId;
            private string commitHash;
            public string <>3__commitHash;
            public RepositoryAnalyzer <>4__this;
            private Dictionary<string, int> <inDegree>5__1;
            private RepositoryAnalyzer.<>c__DisplayClass13_0 <>8__2;
            private Queue<string> <toReadCommits>5__3;

            [DebuggerHidden]
            public <GetCommits>d__13(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Environment.CurrentManagedThreadId;
            }

            private bool MoveNext()
            {
                int num = this.<>1__state;
                RepositoryAnalyzer analyzer = this.<>4__this;
                if (num != 0)
                {
                    if (num != 1)
                    {
                        return false;
                    }
                    this.<>1__state = -1;
                }
                else
                {
                    this.<>1__state = -1;
                    this.<>8__2 = new RepositoryAnalyzer.<>c__DisplayClass13_0();
                    Dictionary<string, int> dictionary1 = new Dictionary<string, int>();
                    dictionary1.Add(this.commitHash, 0);
                    this.<inDegree>5__1 = dictionary1;
                    this.<>8__2.readCommits = new Dictionary<string, Commit>();
                    this.<toReadCommits>5__3 = new Queue<string>();
                    this.<toReadCommits>5__3.Enqueue(this.commitHash);
                    while (this.<toReadCommits>5__3.Count > 0)
                    {
                        string key = this.<toReadCommits>5__3.Dequeue();
                        if (!this.<>8__2.readCommits.ContainsKey(key))
                        {
                            Commit commit = analyzer.repositoryReader.ReadCommit(key);
                            this.<>8__2.readCommits.Add(key, commit);
                            foreach (string str2 in commit.Parents)
                            {
                                int num2;
                                this.<toReadCommits>5__3.Enqueue(str2);
                                if (!this.<inDegree>5__1.TryGetValue(str2, out num2))
                                {
                                    num2 = 0;
                                }
                                this.<inDegree>5__1.set_Item(str2, num2 + 1);
                            }
                        }
                    }
                }
                if (this.<inDegree>5__1.Count <= 0)
                {
                    return false;
                }
                IEnumerable<KeyValuePair<string, int>> enumerable1 = Enumerable.Where<KeyValuePair<string, int>>((IEnumerable<KeyValuePair<string, int>>) this.<inDegree>5__1, RepositoryAnalyzer.<>c.<>9__13_0 ?? (RepositoryAnalyzer.<>c.<>9__13_0 = new Func<KeyValuePair<string, int>, bool>(this.<GetCommits>b__13_0)));
                if (this.<>8__2.<>9__1 == null)
                {
                    IEnumerable<KeyValuePair<string, int>> local2 = Enumerable.Where<KeyValuePair<string, int>>((IEnumerable<KeyValuePair<string, int>>) this.<inDegree>5__1, RepositoryAnalyzer.<>c.<>9__13_0 ?? (RepositoryAnalyzer.<>c.<>9__13_0 = new Func<KeyValuePair<string, int>, bool>(this.<GetCommits>b__13_0)));
                    Func<KeyValuePair<string, int>, Commit> func1 = this.<>8__2.<>9__1 = new Func<KeyValuePair<string, int>, Commit>(this.<>8__2.<GetCommits>b__1);
                    enumerable1 = (IEnumerable<KeyValuePair<string, int>>) func1;
                }
                Commit commit2 = Enumerable.Last<Commit>((IEnumerable<Commit>) Enumerable.OrderBy<Commit, DateTime>(Enumerable.Select<KeyValuePair<string, int>, Commit>((IEnumerable<KeyValuePair<string, int>>) this.<>8__2.<>9__1, (Func<KeyValuePair<string, int>, Commit>) enumerable1), RepositoryAnalyzer.<>c.<>9__13_2 ?? (RepositoryAnalyzer.<>c.<>9__13_2 = new Func<Commit, DateTime>(this.<GetCommits>b__13_2))));
                this.<inDegree>5__1.Remove(commit2.Hash);
                foreach (string str3 in commit2.Parents)
                {
                    string key = str3;
                    int num3 = this.<inDegree>5__1[key];
                    this.<inDegree>5__1.set_Item(key, num3 - 1);
                    this.<toReadCommits>5__3.Enqueue(str3);
                }
                this.<>2__current = commit2;
                this.<>1__state = 1;
                return true;
            }

            [DebuggerHidden]
            IEnumerator<Commit> IEnumerable<Commit>.GetEnumerator()
            {
                RepositoryAnalyzer.<GetCommits>d__13 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Environment.CurrentManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new RepositoryAnalyzer.<GetCommits>d__13(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.commitHash = this.<>3__commitHash;
                return d__;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator() => 
                ((IEnumerator) this.System.Collections.Generic.IEnumerable<GitRead.Net.Data.Commit>.GetEnumerator());

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
            }

            Commit IEnumerator<Commit>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        [CompilerGenerated]
        private sealed class <GetPathAndHashForFiles>d__17 : IEnumerable<RepositoryAnalyzer.PathHashMode>, IEnumerator<RepositoryAnalyzer.PathHashMode>, IEnumerable, IEnumerator, IDisposable
        {
            private int <>1__state;
            private RepositoryAnalyzer.PathHashMode <>2__current;
            private int <>l__initialThreadId;
            public RepositoryAnalyzer <>4__this;
            private string commitHash;
            public string <>3__commitHash;
            private Queue<(string, string)> <treeHashes>5__1;
            private string <folder>5__2;
            private IEnumerator<TreeEntry> <>7__wrap1;

            [DebuggerHidden]
            public <GetPathAndHashForFiles>d__17(int <>1__state)
            {
                this.<>1__state = <>1__state;
                this.<>l__initialThreadId = Environment.CurrentManagedThreadId;
            }

            private void <>m__Finally1()
            {
                this.<>1__state = -1;
                if (this.<>7__wrap1 != null)
                {
                    this.<>7__wrap1.Dispose();
                }
            }

            private bool MoveNext()
            {
                bool flag;
                try
                {
                    int num = this.<>1__state;
                    RepositoryAnalyzer analyzer = this.<>4__this;
                    if (num == 0)
                    {
                        this.<>1__state = -1;
                        Commit commit = analyzer.repositoryReader.ReadCommit(this.commitHash);
                        this.<treeHashes>5__1 = new Queue<(string, string)>();
                        this.<treeHashes>5__1.Enqueue((commit.Tree, string.Empty));
                        goto TR_0005;
                    }
                    else if (num == 1)
                    {
                        this.<>1__state = -3;
                    }
                    else
                    {
                        return false;
                    }
                    goto TR_000F;
                TR_0005:
                    if (this.<treeHashes>5__1.Count > 0)
                    {
                        (string, string) tuple = this.<treeHashes>5__1.Dequeue();
                        string hash = tuple.Item1;
                        this.<folder>5__2 = tuple.Item2;
                        this.<>7__wrap1 = analyzer.repositoryReader.ReadTree(hash).GetEnumerator();
                        this.<>1__state = -3;
                    }
                    else
                    {
                        return false;
                    }
                TR_000F:
                    while (true)
                    {
                        if (this.<>7__wrap1.MoveNext())
                        {
                            TreeEntry current = this.<>7__wrap1.Current;
                            TreeEntryMode mode = current.Mode;
                            if (mode > TreeEntryMode.RegularNonExecutableFile)
                            {
                                if ((mode != TreeEntryMode.RegularNonExecutableGroupWriteableFile) && (mode != TreeEntryMode.RegularExecutableFile))
                                {
                                    continue;
                                }
                            }
                            else
                            {
                                if (mode == TreeEntryMode.Directory)
                                {
                                    this.<treeHashes>5__1.Enqueue((current.Hash, this.<folder>5__2 + current.Name + ((char) Path.DirectorySeparatorChar).ToString()));
                                    continue;
                                }
                                if (mode != TreeEntryMode.RegularNonExecutableFile)
                                {
                                    continue;
                                }
                            }
                            this.<>2__current = new RepositoryAnalyzer.PathHashMode(this.<folder>5__2 + current.Name, current.Hash, current.Mode);
                            this.<>1__state = 1;
                            flag = true;
                        }
                        else
                        {
                            this.<>m__Finally1();
                            this.<>7__wrap1 = null;
                            this.<folder>5__2 = null;
                            goto TR_0005;
                        }
                        break;
                    }
                }
                fault
                {
                    this.System.IDisposable.Dispose();
                }
                return flag;
            }

            [DebuggerHidden]
            IEnumerator<RepositoryAnalyzer.PathHashMode> IEnumerable<RepositoryAnalyzer.PathHashMode>.GetEnumerator()
            {
                RepositoryAnalyzer.<GetPathAndHashForFiles>d__17 d__;
                if ((this.<>1__state == -2) && (this.<>l__initialThreadId == Environment.CurrentManagedThreadId))
                {
                    this.<>1__state = 0;
                    d__ = this;
                }
                else
                {
                    d__ = new RepositoryAnalyzer.<GetPathAndHashForFiles>d__17(0) {
                        <>4__this = this.<>4__this
                    };
                }
                d__.commitHash = this.<>3__commitHash;
                return d__;
            }

            [DebuggerHidden]
            IEnumerator IEnumerable.GetEnumerator() => 
                ((IEnumerator) this.System.Collections.Generic.IEnumerable<GitRead.Net.RepositoryAnalyzer.PathHashMode>.GetEnumerator());

            [DebuggerHidden]
            void IEnumerator.Reset()
            {
                throw new NotSupportedException();
            }

            [DebuggerHidden]
            void IDisposable.Dispose()
            {
                int num = this.<>1__state;
                if ((num == -3) || (num == 1))
                {
                    try
                    {
                    }
                    finally
                    {
                        this.<>m__Finally1();
                    }
                }
            }

            RepositoryAnalyzer.PathHashMode IEnumerator<RepositoryAnalyzer.PathHashMode>.Current =>
                this.<>2__current;

            object IEnumerator.Current =>
                this.<>2__current;
        }

        internal class PathHashMode
        {
            public PathHashMode(string path, string hash, TreeEntryMode mode)
            {
                this.<Path>k__BackingField = path;
                this.<Hash>k__BackingField = hash;
                this.<Mode>k__BackingField = mode;
            }

            public string Path =>
                this.<Path>k__BackingField;

            public string Hash =>
                this.<Hash>k__BackingField;

            public TreeEntryMode Mode =>
                this.<Mode>k__BackingField;
        }
    }
}

