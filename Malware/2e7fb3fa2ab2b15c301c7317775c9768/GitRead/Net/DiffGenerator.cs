namespace GitRead.Net
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.CompilerServices;

    internal static class DiffGenerator
    {
        private static readonly int BlankLineHash = ______________________________("Cg==").GetHashCode();

        private static int FindLengthOfCommonPrefix(string input1, string input2)
        {
            int num = -1;
            int num2 = 0;
            while ((num2 < input1.Length) && (num2 < input2.Length))
            {
                if (input1[num2] != input2[num2])
                {
                    return (num + 1);
                }
                if (input1[num2] == '\n')
                {
                    num = num2;
                }
                num2++;
            }
            return (num2 + 1);
        }

        private static int FindLengthOfCommonSuffix(string input1, string input2)
        {
            int num = 1;
            int num2 = 0;
            while ((num2 < (input1.Length - 1)) && (num2 < (input2.Length - 1)))
            {
                num2++;
                if (input1[input1.Length - num2] != input2[input2.Length - num2])
                {
                    return (num - 1);
                }
                if (input1[input1.Length - num2] == '\n')
                {
                    num = num2;
                }
            }
            return (num2 - 1);
        }

        internal static (int added, int deleted) GetLinesChanged(string contentBefore, string contentNow)
        {
            if (contentBefore.Length == 0)
            {
                return (Enumerable.Count<string>(Split(contentNow, 0, contentNow.Length)), 0);
            }
            if (contentNow.Length == 0)
            {
                return (0, Enumerable.Count<string>(Split(contentBefore, 0, contentBefore.Length)));
            }
            int start = FindLengthOfCommonPrefix(contentBefore, contentNow);
            int suffixLength = FindLengthOfCommonSuffix(contentBefore, contentNow);
            if (((start + suffixLength) >= Math.Max(contentBefore.Length, contentNow.Length)) && (start < suffixLength))
            {
                start = 0;
            }
            else if (((start + suffixLength) >= Math.Max(contentBefore.Length, contentNow.Length)) && (suffixLength < start))
            {
                suffixLength = 0;
            }
            Dictionary<int, List<string>> dictionary = Enumerable.ToDictionary<IGrouping<int, string>, int, List<string>>((IEnumerable<IGrouping<int, string>>) (from x in Split(contentBefore, start, suffixLength) group x by x.GetHashCode()), x => x.Key, x => Enumerable.ToList<string>((IEnumerable<string>) x));
            Dictionary<int, List<string>> dictionary2 = Enumerable.ToDictionary<IGrouping<int, string>, int, List<string>>((IEnumerable<IGrouping<int, string>>) (from x in Split(contentNow, start, suffixLength) group x by x.GetHashCode()), x => x.Key, x => Enumerable.ToList<string>((IEnumerable<string>) x));
            int num3 = 0;
            int num4 = 0;
            foreach (int num5 in Enumerable.Distinct<int>(Enumerable.Concat<int>((IEnumerable<int>) dictionary.get_Keys(), (IEnumerable<int>) dictionary2.get_Keys())))
            {
                List<string> list;
                List<string> list2;
                bool flag = dictionary.TryGetValue(num5, out list);
                bool flag2 = dictionary2.TryGetValue(num5, out list2);
                if ((flag & flag2) && (num5 == BlankLineHash))
                {
                    int num6 = list.Count - list2.Count;
                    if (num6 > 0)
                    {
                        num4 += num6;
                    }
                    if (num6 < 0)
                    {
                        num3 += num6 * -1;
                    }
                    continue;
                }
                if (!(flag & flag2))
                {
                    if (flag)
                    {
                        num4 += list.Count;
                        continue;
                    }
                    if (!flag2)
                    {
                        continue;
                    }
                    num3 += list2.Count;
                    continue;
                }
                List<string> list3 = new List<string>((IEnumerable<string>) list2);
                foreach (string str in list)
                {
                    if (list3.Contains(str))
                    {
                        list3.Remove(str);
                        continue;
                    }
                    num4++;
                }
                foreach (string str2 in list2)
                {
                    if (list.Contains(str2))
                    {
                        list.Remove(str2);
                        continue;
                    }
                    num3++;
                }
            }
            return (num3, num4);
        }

        internal static (int added, int deleted) GetLinesChanged(string contentBefore1, string contentBefore2, string contentNow)
        {
            char[] separator = new char[] { '\n' };
            Dictionary<int, List<string>> dictionary = Enumerable.ToDictionary<IGrouping<int, string>, int, List<string>>((IEnumerable<IGrouping<int, string>>) (from x in contentBefore1.Split(separator) group x by x.GetHashCode()), x => x.Key, x => Enumerable.ToList<string>((IEnumerable<string>) x));
            char[] chArray2 = new char[] { '\n' };
            Dictionary<int, List<string>> dictionary2 = Enumerable.ToDictionary<IGrouping<int, string>, int, List<string>>((IEnumerable<IGrouping<int, string>>) (from x in contentBefore2.Split(chArray2) group x by x.GetHashCode()), x => x.Key, x => Enumerable.ToList<string>((IEnumerable<string>) x));
            char[] chArray3 = new char[] { '\n' };
            Dictionary<int, List<string>> dictionary3 = Enumerable.ToDictionary<IGrouping<int, string>, int, List<string>>((IEnumerable<IGrouping<int, string>>) (from x in contentNow.Split(chArray3) group x by x.GetHashCode()), x => x.Key, x => Enumerable.ToList<string>((IEnumerable<string>) x));
            int num = 0;
            int num2 = 0;
            foreach (KeyValuePair<int, List<string>> pair in dictionary)
            {
                List<string> list;
                if (!dictionary3.TryGetValue(pair.Key, out list))
                {
                    num2 += pair.Value.Count;
                    continue;
                }
                foreach (string str in pair.Value)
                {
                    if (!list.Contains(str))
                    {
                        num2++;
                    }
                }
            }
            foreach (KeyValuePair<int, List<string>> pair2 in dictionary2)
            {
                List<string> list2;
                if (!dictionary3.TryGetValue(pair2.Key, out list2))
                {
                    num2 += pair2.Value.Count;
                    continue;
                }
                foreach (string str2 in pair2.Value)
                {
                    if (!list2.Contains(str2))
                    {
                        num2++;
                    }
                }
            }
            foreach (KeyValuePair<int, List<string>> pair3 in dictionary3)
            {
                List<string> list3 = dictionary.ContainsKey(pair3.Key) ? dictionary[pair3.Key] : new List<string>();
                List<string> list4 = dictionary2.ContainsKey(pair3.Key) ? dictionary2[pair3.Key] : new List<string>();
                foreach (string str3 in pair3.Value)
                {
                    if (list3.Contains(str3))
                    {
                        list3.Remove(str3);
                        continue;
                    }
                    if (list4.Contains(str3))
                    {
                        list4.Remove(str3);
                        continue;
                    }
                    num++;
                }
            }
            return (num, num2);
        }

        [IteratorStateMachine((Type) typeof(<Split>d__5))]
        private static IEnumerable<string> Split(string input, int start, int suffixLength)
        {
            int <i>5__1 = start;
            while (true)
            {
                while (true)
                {
                    if (<i>5__1 < (input.Length - suffixLength))
                    {
                        if (input[<i>5__1] == '\n')
                        {
                            yield return input.Substring(start, (<i>5__1 - start) + 1);
                            start = <i>5__1 + 1;
                            break;
                        }
                    }
                    else
                    {
                        if (start < (input.Length - suffixLength))
                        {
                            yield return input.Substring(start, (input.Length - suffixLength) - start);
                        }
                        break;
                    }
                    break;
                }
                int num2 = <i>5__1;
                <i>5__1 = num2 + 1;
            }
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly DiffGenerator.<>c <>9 = new DiffGenerator.<>c();
            public static Func<string, int> <>9__1_0;
            public static Func<IGrouping<int, string>, int> <>9__1_1;
            public static Func<IGrouping<int, string>, List<string>> <>9__1_2;
            public static Func<string, int> <>9__1_3;
            public static Func<IGrouping<int, string>, int> <>9__1_4;
            public static Func<IGrouping<int, string>, List<string>> <>9__1_5;
            public static Func<string, int> <>9__2_0;
            public static Func<IGrouping<int, string>, int> <>9__2_1;
            public static Func<IGrouping<int, string>, List<string>> <>9__2_2;
            public static Func<string, int> <>9__2_3;
            public static Func<IGrouping<int, string>, int> <>9__2_4;
            public static Func<IGrouping<int, string>, List<string>> <>9__2_5;
            public static Func<string, int> <>9__2_6;
            public static Func<IGrouping<int, string>, int> <>9__2_7;
            public static Func<IGrouping<int, string>, List<string>> <>9__2_8;

            internal int <GetLinesChanged>b__1_0(string x) => 
                x.GetHashCode();

            internal int <GetLinesChanged>b__1_1(IGrouping<int, string> x) => 
                x.Key;

            internal List<string> <GetLinesChanged>b__1_2(IGrouping<int, string> x) => 
                Enumerable.ToList<string>((IEnumerable<string>) x);

            internal int <GetLinesChanged>b__1_3(string x) => 
                x.GetHashCode();

            internal int <GetLinesChanged>b__1_4(IGrouping<int, string> x) => 
                x.Key;

            internal List<string> <GetLinesChanged>b__1_5(IGrouping<int, string> x) => 
                Enumerable.ToList<string>((IEnumerable<string>) x);

            internal int <GetLinesChanged>b__2_0(string x) => 
                x.GetHashCode();

            internal int <GetLinesChanged>b__2_1(IGrouping<int, string> x) => 
                x.Key;

            internal List<string> <GetLinesChanged>b__2_2(IGrouping<int, string> x) => 
                Enumerable.ToList<string>((IEnumerable<string>) x);

            internal int <GetLinesChanged>b__2_3(string x) => 
                x.GetHashCode();

            internal int <GetLinesChanged>b__2_4(IGrouping<int, string> x) => 
                x.Key;

            internal List<string> <GetLinesChanged>b__2_5(IGrouping<int, string> x) => 
                Enumerable.ToList<string>((IEnumerable<string>) x);

            internal int <GetLinesChanged>b__2_6(string x) => 
                x.GetHashCode();

            internal int <GetLinesChanged>b__2_7(IGrouping<int, string> x) => 
                x.Key;

            internal List<string> <GetLinesChanged>b__2_8(IGrouping<int, string> x) => 
                Enumerable.ToList<string>((IEnumerable<string>) x);
        }

    }
}

