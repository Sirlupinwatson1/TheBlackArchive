namespace GitRead.Net
{
    using GitRead.Net.Data;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.IO.Compression;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;

    public class RepositoryReader
    {
        private const char whiteSpace = ' ';
        private const char nullChar = '\0';
        private readonly string repoPath;
        private readonly PackIndexReader indexReader;

        public RepositoryReader(string repoPath)
        {
            this.repoPath = repoPath.EndsWith(______________________________("LmdpdA==")) ? repoPath : Path.Combine(repoPath, ______________________________("LmdpdA=="));
            this.indexReader = new PackIndexReader(this.repoPath);
        }

        private DeflateStream GetDeflateStreamForZlibData(Stream stream)
        {
            stream.Seek(2L, (SeekOrigin) SeekOrigin.Current);
            return new DeflateStream(stream, (CompressionMode) CompressionMode.Decompress);
        }

        private string GetObjectFilePath(string hash)
        {
            string str = hash.Substring(0, 2);
            return Path.Combine(this.repoPath, ______________________________("b2JqZWN0cw=="), str, hash.Substring(2));
        }

        internal string ReadBlob(string hash)
        {
            string str;
            if (!File.Exists(this.GetObjectFilePath(hash)))
            {
                return this.ReadObjectFromPack<string>(hash, (s, _, useZlib) => this.ReadBlobFromStream(s, useZlib));
            }
            using (FileStream stream = File.OpenRead(this.GetObjectFilePath(hash)))
            {
                using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
                {
                    using (StreamReader reader = new StreamReader((Stream) stream2, Encoding.get_UTF8()))
                    {
                        StringBuilder builder = new StringBuilder();
                        while (true)
                        {
                            int num = reader.Read();
                            if (num == 0x20)
                            {
                                if (builder.ToString() != ______________________________("YmxvYg=="))
                                {
                                    throw new Exception(string.Format(______________________________("T2JqZWN0IHdpdGggaGFzaCB7MH0gaXMgbm90IGEgYmxvYi4gSXQgaXMgYSB7MX0u"), hash, builder.ToString()));
                                }
                                StringBuilder builder2 = new StringBuilder();
                                while (true)
                                {
                                    num = reader.Read();
                                    if (num == 0)
                                    {
                                        str = reader.ReadToEnd();
                                        break;
                                    }
                                    builder2.Append((char) num);
                                }
                                break;
                            }
                            builder.Append((char) num);
                        }
                    }
                }
            }
            return str;
        }

        private string ReadBlobFromStream(Stream stream, bool useZlib)
        {
            string str;
            if (!useZlib)
            {
                using (StreamReader reader2 = new StreamReader(stream, Encoding.get_UTF8()))
                {
                    str = reader2.ReadToEnd();
                }
            }
            else
            {
                using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
                {
                    using (StreamReader reader = new StreamReader((Stream) stream2, Encoding.get_UTF8()))
                    {
                        str = reader.ReadToEnd();
                    }
                }
            }
            return str;
        }

        public string ReadBranch(string branchName)
        {
            string path = Path.Combine(this.repoPath, ______________________________("cmVmcw=="), ______________________________("aGVhZHM="), branchName);
            if (File.Exists(path))
            {
                return File.ReadAllLines(path)[0];
            }
            string str2 = Path.Combine(this.repoPath, ______________________________("cGFja2VkLXJlZnM="));
            if (!File.Exists(str2))
            {
                throw new Exception(string.Format(______________________________("Q291bGQgbm90IGZpbmQgZmlsZSB7MH0gb3IgZmlsZSB7MX0="), path, str2));
            }
            return Enumerable.First<string[]>((IEnumerable<string[]>) (from x in File.ReadAllLines(str2)
                where !x.StartsWith(______________________________("Iw=="))
                select x.Split(new char[] { ' ' }) into x
                where x[1].EndsWith(branchName)
                select x))[0];
        }

        private byte[] ReadBytes(Stream stream, long length, bool useZlib)
        {
            byte[] buffer = new byte[length];
            if (!useZlib)
            {
                stream.Read(buffer, 0, (int) length);
                return buffer;
            }
            using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
            {
                stream2.Read(buffer, 0, (int) length);
            }
            return buffer;
        }

        internal Commit ReadCommit(string hash)
        {
            string objectFilePath = this.GetObjectFilePath(hash);
            return (!File.Exists(objectFilePath) ? this.ReadObjectFromPack<Commit>(hash, (s, _, useZlib) => this.ReadCommitFromStream(s, hash, useZlib)) : this.ReadCommitFromFile(objectFilePath, hash));
        }

        private Commit ReadCommitCore(StreamReader reader, string hash)
        {
            string text1 = reader.ReadLine();
            if (!text1.StartsWith(______________________________("dHJlZQ==")))
            {
                throw new Exception(______________________________("SW52YWxpZCBjb21taXQgb2JqZWN0"));
            }
            string tree = text1.Substring(5);
            List<string> parents = new List<string>();
            string str2 = reader.ReadLine();
            while (str2.StartsWith(______________________________("cGFyZW50")))
            {
                parents.Add(str2.Substring(7));
                str2 = reader.ReadLine();
            }
            if (!str2.StartsWith(______________________________("YXV0aG9y")))
            {
                throw new Exception(______________________________("SW52YWxpZCBjb21taXQgb2JqZWN0"));
            }
            string author = str2.Substring(7);
            string text2 = reader.ReadLine();
            if (!text2.StartsWith(______________________________("Y29tbWl0dGVy")))
            {
                throw new Exception(______________________________("SW52YWxpZCBjb21taXQgb2JqZWN0"));
            }
            text2.Substring(10);
            reader.ReadLine();
            return new Commit(hash, tree, parents, author, reader.ReadToEnd());
        }

        private Commit ReadCommitFromFile(string filePath, string hash)
        {
            Commit commit;
            using (FileStream stream = File.OpenRead(filePath))
            {
                using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
                {
                    using (StreamReader reader = new StreamReader((Stream) stream2, Encoding.get_UTF8()))
                    {
                        StringBuilder builder = new StringBuilder();
                        while (true)
                        {
                            int num = reader.Read();
                            if (num == 0x20)
                            {
                                if (builder.ToString() != ______________________________("Y29tbWl0"))
                                {
                                    throw new Exception(string.Format(______________________________("T2JqZWN0IHdpdGggaGFzaCB7MH0gaXMgbm90IGEgY29tbWl0IG9iamVjdC4gSXQgaXMgYSB7MX0u"), hash, builder));
                                }
                                StringBuilder builder2 = new StringBuilder();
                                while (true)
                                {
                                    num = reader.Read();
                                    if (num == 0)
                                    {
                                        commit = this.ReadCommitCore(reader, hash);
                                        break;
                                    }
                                    builder2.Append((char) num);
                                }
                                break;
                            }
                            builder.Append((char) num);
                        }
                    }
                }
            }
            return commit;
        }

        private Commit ReadCommitFromStream(Stream stream, string hash, bool useZlib)
        {
            Commit commit;
            if (!useZlib)
            {
                using (StreamReader reader2 = new StreamReader(stream, Encoding.get_UTF8()))
                {
                    commit = this.ReadCommitCore(reader2, hash);
                }
            }
            else
            {
                using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
                {
                    using (StreamReader reader = new StreamReader((Stream) stream2, Encoding.get_UTF8()))
                    {
                        commit = this.ReadCommitCore(reader, hash);
                    }
                }
            }
            return commit;
        }

        public string ReadHead()
        {
            char[] separator = new char[] { '/' };
            return Enumerable.Last<string>(File.ReadAllLines(Path.Combine(this.repoPath, ______________________________("SEVBRA==")))[0].Split(separator));
        }

        private T ReadObjectFromPack<T>(string hash, Func<Stream, long, bool, T> extractFunc)
        {
            T local;
            using (IEnumerator<string> enumerator = Directory.EnumerateFiles(Path.Combine(this.repoPath, ______________________________("b2JqZWN0cw=="), ______________________________("cGFjaw==")), ______________________________("Ki5pZHg=")).GetEnumerator())
            {
                while (true)
                {
                    if (enumerator.MoveNext())
                    {
                        string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(enumerator.Current);
                        long offset = this.indexReader.ReadIndex(fileNameWithoutExtension, hash);
                        if (offset == -1L)
                        {
                            continue;
                        }
                        using (FileStream stream = File.OpenRead(Path.Combine(this.repoPath, ______________________________("b2JqZWN0cw=="), ______________________________("cGFjaw=="), fileNameWithoutExtension + ______________________________("LnBhY2s="))))
                        {
                            local = this.ReadPackFile<T>(stream, hash, offset, extractFunc);
                        }
                    }
                    else
                    {
                        return default(T);
                    }
                    break;
                }
            }
            return local;
        }

        private T ReadPackFile<T>(FileStream fileStream, string hash, long offset, Func<Stream, long, bool, T> extractFunc)
        {
            byte[] buffer = new byte[1];
            fileStream.Seek(offset, (SeekOrigin) SeekOrigin.Begin);
            fileStream.Read(buffer, 0, 1);
            PackFileObjectType type = (PackFileObjectType) ((byte) ((buffer[0] & 0x70) >> 4));
            long num = buffer[0] & 15;
            int num2 = 0;
            while ((buffer[0] & 0x80) != 0)
            {
                num2++;
                fileStream.Read(buffer, 0, 1);
                num += (buffer[0] & 0x7f) << ((4 + (7 * (num2 - 1))) & 0x1f);
            }
            switch (type)
            {
                case PackFileObjectType.Commit:
                    return extractFunc(fileStream, num, true);

                case PackFileObjectType.Tree:
                    return extractFunc(fileStream, num, true);

                case PackFileObjectType.Blob:
                    return extractFunc(fileStream, num, true);

                case PackFileObjectType.ObjOfsDelta:
                {
                    long num3 = this.ReadVariableLengthOffset(fileStream);
                    DeflateStream deflateStreamForZlibData = this.GetDeflateStreamForZlibData(fileStream);
                    (int, long) tuple = this.ReadVariableLengthSize((Stream) deflateStreamForZlibData);
                    (int, long) tuple2 = this.ReadVariableLengthSize((Stream) deflateStreamForZlibData);
                    int count = (((int) num) - tuple.Item1) - tuple2.Item1;
                    byte[] buffer2 = new byte[count];
                    deflateStreamForZlibData.Read(buffer2, 0, count);
                    byte[] baseBytes = this.ReadPackFile<byte[]>(fileStream, null, offset - num3, new Func<Stream, long, bool, byte[]>(this.ReadBytes));
                    if (baseBytes.Length != tuple.Item2)
                    {
                        throw new Exception(______________________________("QmFzZSBvYmplY3QgZGlkIG5vdCBtYXRjaCBleHBlY3RlZCBsZW5ndGg="));
                    }
                    byte[] buffer4 = this.Undeltify(baseBytes, buffer2, tuple2.Item2);
                    return extractFunc((Stream) new MemoryStream(buffer4), (long) buffer4.Length, false);
                }
            }
            return default(T);
        }

        private string ReadString(Stream stream, char delimiter)
        {
            byte[] buffer = new byte[1];
            StringBuilder builder = new StringBuilder();
            stream.Read(buffer, 0, 1);
            char ch = Encoding.get_UTF8().GetChars(buffer)[0];
            while (ch != delimiter)
            {
                builder.Append(ch);
                stream.Read(buffer, 0, 1);
                ch = Encoding.get_UTF8().GetChars(buffer)[0];
            }
            while (ch != delimiter)
            {
            }
            return builder.ToString();
        }

        internal IReadOnlyList<TreeEntry> ReadTree(string hash)
        {
            string objectFilePath = this.GetObjectFilePath(hash);
            return (!File.Exists(objectFilePath) ? this.ReadObjectFromPack<IReadOnlyList<TreeEntry>>(hash, new Func<Stream, long, bool, IReadOnlyList<TreeEntry>>(this.ReadTreeFromStream)) : this.ReadTreeFromFile(objectFilePath, hash));
        }

        private IReadOnlyList<TreeEntry> ReadTreeCore(Stream stream, int length)
        {
            List<TreeEntry> list = new List<TreeEntry>();
            while (length > 0)
            {
                string mode = this.ReadString(stream, ' ');
                string name = this.ReadString(stream, '\0');
                byte[] buffer = new byte[20];
                stream.Read(buffer, 0, 20);
                length -= (((mode.Length + 1) + name.Length) + 1) + 20;
                list.Add(new TreeEntry(name, string.Concat((IEnumerable<string>) (from x in buffer select ((byte) x).ToString("X2"))), mode));
            }
            return (IReadOnlyList<TreeEntry>) list;
        }

        private IReadOnlyList<TreeEntry> ReadTreeFromFile(string filePath, string hash)
        {
            IReadOnlyList<TreeEntry> list;
            List<TreeEntry> list1 = new List<TreeEntry>();
            using (FileStream stream = File.OpenRead(filePath))
            {
                using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
                {
                    string str = this.ReadString((Stream) stream2, ' ');
                    if (str.ToString() != ______________________________("dHJlZQ=="))
                    {
                        throw new Exception(string.Format(______________________________("T2JqZWN0IHdpdGggaGFzaCB7MH0gaXMgbm90IGEgdHJlZS4gSXQgaXMgYSB7MX0u"), hash, str));
                    }
                    list = this.ReadTreeCore((Stream) stream2, int.Parse(this.ReadString((Stream) stream2, '\0')));
                }
            }
            return list;
        }

        private IReadOnlyList<TreeEntry> ReadTreeFromStream(Stream stream, long length, bool useZlib)
        {
            if (!useZlib)
            {
                return this.ReadTreeCore(stream, (int) length);
            }
            using (DeflateStream stream2 = this.GetDeflateStreamForZlibData(stream))
            {
                return this.ReadTreeCore((Stream) stream2, (int) length);
            }
        }

        private long ReadVariableLengthOffset(Stream stream)
        {
            byte[] buffer = new byte[1];
            stream.Read(buffer, 0, 1);
            long num = buffer[0] & 0x7f;
            while ((buffer[0] & 0x80) != 0)
            {
                stream.Read(buffer, 0, 1);
                num = ((num + 1L) << 7) + ((byte) (buffer[0] & 0x7f));
            }
            return num;
        }

        private (int bytesRead, long length) ReadVariableLengthSize(Stream stream)
        {
            byte[] buffer = new byte[1];
            stream.Read(buffer, 0, 1);
            long num = buffer[0] & 0x7f;
            int num2 = 0;
            while ((buffer[0] & 0x80) != 0)
            {
                num2++;
                stream.Read(buffer, 0, 1);
                num += (buffer[0] & 0x7f) << ((7 * num2) & 0x1f);
            }
            return (num2 + 1, num);
        }

        private byte[] Undeltify(byte[] baseBytes, byte[] deltaBytes, long targetLength)
        {
            byte[] buffer = new byte[targetLength];
            int index = 0;
            int num2 = 0;
            while (index < deltaBytes.Length)
            {
                byte num3 = deltaBytes[index];
                index++;
                if ((num3 & 0x80) == 0)
                {
                    int num9 = num3;
                    for (int i = 0; i < num9; i++)
                    {
                        buffer[num2] = deltaBytes[index];
                        num2++;
                        index++;
                    }
                    continue;
                }
                int num4 = 0;
                int num6 = 0;
                while (true)
                {
                    if (num6 >= 4)
                    {
                        int num5 = 0;
                        int num7 = 4;
                        while (true)
                        {
                            if (num7 >= 7)
                            {
                                if (num5 == 0)
                                {
                                    num5 = 0x10000;
                                }
                                for (int i = 0; i < num5; i++)
                                {
                                    buffer[num2] = baseBytes[num4 + i];
                                    num2++;
                                }
                                break;
                            }
                            if ((num3 & (1 << (num7 & 0x1f))) != 0)
                            {
                                num5 += deltaBytes[index] << ((8 * num7) & 0x1f);
                                index++;
                            }
                            num7++;
                        }
                        break;
                    }
                    if ((num3 & (1 << (num6 & 0x1f))) != 0)
                    {
                        num4 += deltaBytes[index] << ((8 * num6) & 0x1f);
                        index++;
                    }
                    num6++;
                }
            }
            return buffer;
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly RepositoryReader.<>c <>9 = new RepositoryReader.<>c();
            public static Func<string, bool> <>9__6_0;
            public static Func<string, string[]> <>9__6_1;
            public static Func<byte, string> <>9__17_0;

            internal bool <ReadBranch>b__6_0(string x) => 
                !x.StartsWith(______________________________("Iw=="));

            internal string[] <ReadBranch>b__6_1(string x)
            {
                char[] separator = new char[] { ' ' };
                return x.Split(separator);
            }

            internal string <ReadTreeCore>b__17_0(byte x) => 
                ((byte) x).ToString("X2");
        }
    }
}

