namespace GitRead.Net
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    public class PackIndexPrinter
    {
        private readonly string repoPath;

        public PackIndexPrinter(string repoPath)
        {
            this.repoPath = repoPath.EndsWith(______________________________("LmdpdA==")) ? repoPath : Path.Combine(repoPath, ______________________________("LmdpdA=="));
        }

        public void PrintIndexFile(string name, bool sorted)
        {
            using (FileStream stream = File.OpenRead(Path.Combine(this.repoPath, ______________________________("b2JqZWN0cw=="), ______________________________("cGFjaw=="), name + ______________________________("LmlkeA=="))))
            {
                byte[] buffer = new byte[4];
                stream.Read(buffer, 0, 4);
                if ((buffer[0] != 0xff) || ((buffer[1] != 0x74) || ((buffer[2] != 0x4f) || (buffer[3] != 0x63))))
                {
                    throw new Exception(______________________________("SW52YWxpZCBpbmRleCBmaWxl"));
                }
                stream.Read(buffer, 0, 4);
                if ((buffer[0] != 0) || ((buffer[1] != 0) || ((buffer[2] != 0) || (buffer[3] != 2))))
                {
                    throw new Exception(______________________________("SW52YWxpZCBpbmRleCBmaWxlIHZlcnNpb24="));
                }
                uint num2 = this.ReadUInt32(stream, 0x404);
                string[] strArray = new string[num2];
                uint index = 0;
                while (true)
                {
                    if (index >= num2)
                    {
                        stream.Seek((long) (num2 * 4), (SeekOrigin) SeekOrigin.Current);
                        uint[] numArray = new uint[num2];
                        uint num4 = 0;
                        while (true)
                        {
                            if (num4 >= num2)
                            {
                                var enumerable = Enumerable.Zip(strArray, numArray, (x, y) => new { 
                                    Hash = x,
                                    Offset = y
                                });
                                if (sorted)
                                {
                                    enumerable = from x in enumerable
                                        orderby x.Offset
                                        select x;
                                }
                                Enumerable.ToList(enumerable).ForEach((Action<<>f__AnonymousType0<string, uint>>) (x => Console.WriteLine(x.Hash + ______________________________("IA==") + ((uint) x.Offset))));
                                break;
                            }
                            uint? pos = null;
                            numArray[num4] = this.ReadUInt32(stream, pos);
                            num4++;
                        }
                        break;
                    }
                    strArray[index] = this.ReadHash(stream);
                    index++;
                }
            }
        }

        private string ReadHash(FileStream fileStream)
        {
            byte[] buffer = new byte[20];
            fileStream.Read(buffer, 0, 20);
            return string.Concat((IEnumerable<string>) (from x in buffer select ((byte) x).ToString("X2")));
        }

        private uint ReadUInt32(FileStream fileStream, uint? pos = new uint?())
        {
            byte[] buffer = new byte[4];
            if (pos.HasValue)
            {
                fileStream.Seek((long) ((ulong) pos.Value), (SeekOrigin) SeekOrigin.Begin);
            }
            fileStream.Read(buffer, 0, 4);
            Array.Reverse(buffer);
            return BitConverter.ToUInt32(buffer, 0);
        }

        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly PackIndexPrinter.<>c <>9 = new PackIndexPrinter.<>c();
            public static Func<string, uint, <>f__AnonymousType0<string, uint>> <>9__2_0;
            public static Func<<>f__AnonymousType0<string, uint>, uint> <>9__2_1;
            public static Action<<>f__AnonymousType0<string, uint>> <>9__2_2;
            public static Func<byte, string> <>9__3_0;

            internal <>f__AnonymousType0<string, uint> <PrintIndexFile>b__2_0(string x, uint y) => 
                new { 
                    Hash = x,
                    Offset = y
                };

            internal uint <PrintIndexFile>b__2_1(<>f__AnonymousType0<string, uint> x) => 
                x.Offset;

            internal void <PrintIndexFile>b__2_2(<>f__AnonymousType0<string, uint> x)
            {
                Console.WriteLine(x.Hash + ______________________________("IA==") + ((uint) x.Offset));
            }

            internal string <ReadHash>b__3_0(byte x) => 
                ((byte) x).ToString("X2");
        }
    }
}

