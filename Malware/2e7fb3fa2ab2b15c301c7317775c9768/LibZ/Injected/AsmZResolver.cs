namespace LibZ.Injected
{
    using Microsoft.Win32;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Security.Cryptography;
    using System.Text;
    using System.Text.RegularExpressions;

    internal class AsmZResolver
    {
        private static readonly Regex ResourceNameRx;
        private static readonly Assembly ThisAssembly;
        private static readonly string ThisAssemblyName;
        private static readonly Guid ThisAssemblyGuid;
        private static int _initialized;
        private static readonly Dictionary<Guid, Match> ResourceNames;
        private static readonly Dictionary<Guid, Assembly> LoadedAssemblies;
        private static readonly bool UseTrace;

        [MethodImpl(MethodImplOptions.NoInlining)]
        static AsmZResolver()
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static Assembly AssemblyResolver(object sender, ResolveEventArgs args)
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object C5BdbhYRg2YmqtANLm(object obj1) => 
            obj1.GetManifestResourceNames();

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void Debug(string message)
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void Error(string message)
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static uint? GetRegistryDWORD(bool machine, string path, string name)
        {
            RegistryKey key2 = (machine ? Registry.LocalMachine : Registry.CurrentUser).OpenSubKey(path, false);
            if (key2 == null)
            {
                return null;
            }
            object obj2 = key2.GetValue(name);
            if (obj2 == null)
            {
                return null;
            }
            try
            {
                return new uint?(Convert.ToUInt32(obj2));
            }
            catch
            {
                return null;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static void gVjOZT1hUjPXJGPvmI(object obj1)
        {
            Warn((string) obj1);
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static Guid Hash(string text) => 
            new Guid(MD5.Create().ComputeHash(Encoding.UTF8.GetBytes(text.ToLowerInvariant())));

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static int iAKu6u8F4GedkOovF4(object obj1) => 
            int.Parse((string) obj1);

        [MethodImpl(MethodImplOptions.NoInlining)]
        public static void Initialize()
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object knbQcVl4X9UcsmVbR2(object obj1) => 
            TryLoadAssembly((string) obj1);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static Assembly LoadUnmanagedAssembly(string resourceName, Guid guid, byte[] assemblyImage)
        {
            string str;
            string str2;
            int num2;
            if (!vSdiZ0AC9COSep39jc())
            {
                bool local5 = o0UNqcgAjxiVL5ktem();
                num2 = 3;
            }
            else
            {
                bool local2 = o0UNqcgAjxiVL5ktem();
                num2 = 1;
                if (!vSdiZ0AC9COSep39jc())
                {
                    goto TR_000A;
                }
            }
            goto TR_0002;
        TR_0000:
            return Assembly.LoadFrom(str2);
        TR_0002:
            switch (num2)
            {
                case 0:
                case 1:
                    goto TR_0004;

                case 4:
                    str = Path.Combine(Path.GetTempPath(), ThisAssemblyGuid.ToString(______________________________("Tg==")));
                    Directory.CreateDirectory(str);
                    break;

                case 5:
                    goto TR_0000;

                default:
                    break;
            }
            goto TR_000A;
        TR_0004:
            while (true)
            {
                Debug(string.Format(______________________________("VHJ5aW5nIHRvIGxvYWQgYXMgdW5tYW5hZ2VkL3BvcnRhYmxlIGFzc2VtYmx5ICd7MH0n"), resourceName));
                num2 = 4;
                break;
            }
            goto TR_0002;
        TR_000A:
            while (true)
            {
                str2 = Path.Combine(str, string.Format(______________________________("ezA6Tn0uZGxs"), guid));
                FileInfo info = new FileInfo(str2);
                if (!info.Exists || (info.Length != assemblyImage.Length))
                {
                    File.WriteAllBytes(str2, assemblyImage);
                    num2 = 5;
                    if (1 != 0)
                    {
                        goto TR_0002;
                    }
                }
                else
                {
                    goto TR_0000;
                }
                break;
            }
            goto TR_0004;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object m9faZhFR9P5Rp3pxdv(object obj1, object obj2) => 
            obj1[(string) obj2];

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static bool o0UNqcgAjxiVL5ktem() => 
            false;

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static bool OHPBlANqkksiqrdOgR(object obj1, object obj2) => 
            (obj1 != obj2);

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object PfTkyH5qb4xCeZpI73(object obj1, int num1) => 
            obj1[num1];

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object pKRXWTHQx9R1WZCvXN(object obj1) => 
            obj1.Name;

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static Type pKsgD6uqiBBRN7CV6P(object obj1) => 
            obj1.GetType();

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static uint? SafeGetRegistryDWORD(bool machine, string path, string name)
        {
            try
            {
                return GetRegistryDWORD(machine, path, name);
            }
            catch
            {
                return null;
            }
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static Assembly TryLoadAssembly(string resourceName)
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static bool vSdiZ0AC9COSep39jc() => 
            true;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void Warn(string message)
        {
            // Invalid method body.
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static void YMULqUX6B5hEu8uutA(object obj1, object obj2)
        {
            obj1.AssemblyResolve += obj2;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        internal static object yY3bsnVr29cd7JiJde(object obj1) => 
            obj1.Groups;
    }
}

